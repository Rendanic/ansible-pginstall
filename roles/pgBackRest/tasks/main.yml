- name: Install pgbackrest
  package:
    name: "pgbackrest"
    state: present
  tags: pgbackrest

- name: Template pgbackrest.conf
  template:
    src: logrotate.conf.j2
    dest: /etc/logrotate.d/pgbackrest.conf
    mode: 0644
    owner: root
    group: root
  no_log: true
  tags: pgbackrest

- name: Template pgbackrest.conf
  template:
    src: pgbackrest.conf.j2
    dest: /etc/pgbackrest.conf
    owner: "{{postgresql_user}}"
    group: "{{postgresql_group}}"
    mode: 0640
  tags: pgbackrest,pgbackcfg

# change owner+permissions of directory for spool
- name: chown root pgbackrest spool directory
  file:
    path: "{{pgbackrestspool_parent}}"
    state: directory
    owner: "{{postgresql_user}}"
    group: "{{postgresql_group}}"
    mode: 0755
  tags: pgbackrest,test1

- name: pgbackrest Logfile directory
  file:
    path: /var/log/pgbackrest
    state: directory
    owner: "{{postgresql_user}}"
    group: "{{postgresql_group}}"
    mode: o=-rwx
  tags: pgbackrest

- name: pgbackrest stanze directory
  file:
    path: "{{pgbackrestrepo}}"
    state: directory
    owner: "{{postgresql_user}}"
    group: "{{postgresql_group}}"
    mode: 0750
  tags: pgbackrest
  when: pgbackrest_s3 is not defined

- name: pgbackrest spool directory
  file:
    path: "{{pgbackrestspool}}"
    state: directory
    owner: "{{postgresql_user}}"
    group: "{{postgresql_group}}"
    mode: 0750
  tags: pgbackrest
  when: pgbackrestspool is defined
- name: pgbackrest stanza-create
  command: pgbackrest --stanza={{pgbackreststanza}} --log-level-console=info stanza-create
  args:
    creates: "{{pgbackrestrepo}}/archive"
  register: cmdout
  become_user: "{{postgresql_user}}"
  when: dbcluster_role == 'primary'

- debug: msg="{{ cmdout.stdout_lines }}"
  when: cmdout is defined and cmdout.stdout_lines is defined

- name: pgbackrest check
  command: pgbackrest --stanza={{pgbackreststanza}} --log-level-console=info check
  register: cmdout
  become_user: "{{postgresql_user}}"
  when: dbcluster_role == 'primary'

- debug: msg="{{ cmdout.stdout_lines }}"
  when: cmdout is defined and cmdout.stdout_lines is defined

- name: check for an existing backup
  command: pgbackrest --stanza={{pgbackreststanza}} info
  become_user: "{{postgresql_user}}"
  register: backupstate
  changed_when: '" status: ok" not in backupstate.stdout'
  when: dbcluster_role == 'primary'
  tags: test

- debug: msg="Full Backup missing? {{backupstate.changed}}"
  when: dbcluster_role == 'primary' and backupstate is defined
  tags: test

# show only warn/error due to spam in logfile
# --archive-copy => make sure that WAL is existing for later standby restore
- name: initial Full-Backup
  command: pgbackrest --stanza={{pgbackreststanza}} --log-level-console=warn --archive-copy --type=full backup
  register: cmdout
  become_user: "{{postgresql_user}}"
  when: dbcluster_role == 'primary' and backupstate.changed
  tags: test

- name: Show warn/errors from initial Full-Backup
  debug: msg="{{ cmdout.stdout_lines }}"
  when: cmdout is defined and cmdout.stdout_lines is defined
